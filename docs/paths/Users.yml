---
paths:
  '/api/users':
    get:
      tags:
        - Users
      name: Get All Users
      summary: Gets all Users
      security:
        - bearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: A single Users array.
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/User'
        304:
          description: A cached users array.
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/User'
        401:
          description: No auth token / no user found in database with that name.
        403:
          description: JWT token and username from client don't match.
        500:
          description: Internal server error on back-end occured.
        502:
          description: Bad gateway.
    delete:
      tags:
        - Users
      name: Deletes All Users
      summary: Removes all Users and all ROMs
      security:
        - bearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: A success object.
          schema:
            properties:
              type: object
              success:
                type: boolean
              message:
                type: string
              status:
                type: object
        401:
          description: No auth token / no user found in database with that name.
        403:
          description: JWT token and username from client don't match.
        404:
          description: Specified User not found.
        500:
          description: Internal server error on back-end occured.
        502:
          description: Bad gateway.
    head:
      tags:
        - Users
      name: Get Head Info (All Users)
      summary: Gets Header Information of all Users
      security:
        - bearerAuth: []
      responses:
        200:
          description: No body, just headers.
        500:
          description: Internal server error on back-end occured.
  '/api/users/{id}':
    get:
      tags:
        - Users
      name: Get Single User
      summary: Gets a single User
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The ID of the User to get.
          required: true
          type: string
      responses:
        200:
          description: A single User object.
          schema:
            $ref: '#/definitions/User'
            type: object
        304:
          description: A cached User object.
          schema:
            $ref: '#/definitions/User'
            type: object
        401:
          description: No auth token / no user found in database with that name.
        403:
          description: JWT token and username from client don't match.
        404:
          description: User not found.
        500:
          description: Internal server error on back-end occured.
    put:
      tags:
        - Users
      name: Update User
      summary: Updates a User in the database.
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The ID of the User to update.
          required: true
          type: string
        - in: body
          name: userData
          description: The User data to update with.
          required: true
          schema:
            $ref: '#/definitions/User'
            type: object
      responses:
        201:
          description: A single user object.
          schema:
            type: object
            properties:
              success:
                type: string
              user:
                type: object
                properties:
                  _id:
                    type: string
                    format: byte
                  name:
                    type: string
                    minlength: 1
                    maxlength: 100
                    nullable: true
                  username:
                    type: string
                    minlength: 5
                    maxlength: 22
                required:
                  - _id
                  - username
        400:
          description: Bad JSON input.
        401:
          description: Unauthorized.
        404:
          description: User not found.
        406:
          description: Not acceptable JSON body.
        500:
          description: Internal server error on back-end occured.
    patch:
      tags:
        - Users
      name: Patch User
      summary: Partially updates a User in the database.
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The ID of the User to partially update.
          required: true
          type: string
        - in: body
          name: userData
          description: The User data to partially update with.
          required: true
          schema:
            $ref: '#/definitions/User'
            type: object
      responses:
        201:
          description: A single user object.
          schema:
            type: object
            properties:
              success:
                type: string
              user:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  username:
                    type: string
        400:
          description: Bad JSON input.
        401:
          description: Unauthorized.
        404:
          description: User not found.
        406:
          description: Not acceptable JSON body.
        500:
          description: Internal server error on back-end occured.
        502:
          description: Bad gateway.
    delete:
      tags:
        - Users
      name: Delete Single User
      summary: Removes a single User and all of their ROMs
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The ID of the User to remove.
          required: true
          type: string
      responses:
        200:
          description: A success object.
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              status:
                type: object
        401:
          description: No auth token / no user found in database with that name.
        403:
          description: JWT token and username from client don't match.
        404:
          description: Specified User not found.
        500:
          description: Internal server error on back-end occured.
        502:
          description: Bad gateway.
    head:
      tags:
        - Users
      name: Get Single Head Info
      summary: Gets Header Information of a single User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the User to get header of.
          required: true
          type: string
      responses:
        200:
          description: No body, just headers.
        404:
          description: User not found.
        500:
          description: Internal server error on back-end occured.
  '/api/users/{username}':
    post:
      tags:
        - Users
      name: Get User by Username
      summary: Gets a single user from their username.
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The username of the User to get.
          required: true
          type: string
      responses:
        200:
          description: A single User object.
          schema:
            $ref: '#/definitions/User'
            type: object
        304:
          description: A cached User object.
          schema:
            $ref: '#/definitions/User'
            type: object
        401:
          description: No auth token / no user found in database with that name.
        403:
          description: JWT token and username from client don't match.
        404:
          description: User not found.
        500:
          description: Internal server error on back-end occured.
  '/api/users/register':
    post:
      tags:
        - Users
      name: Add User
      summary: Adds a User to the database along with all the core ROMs
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: newUser
          description: The User data to add to the database.
          required: true
          schema:
            $ref: '#/definitions/User'
            type: object
      responses:
        201:
          description: A single user object.
          schema:
            $ref: '#/definitions/User'
            type: object
        400:
          description: Bad JSON input.
        406:
          description: Not acceptable JSON body.
        500:
          description: User with username already exists or internal server error.
  '/api/users/authenticate':
    post:
      tags:
        - Users
      name: Auth User
      summary: Authenticates a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: The user to authenticate.
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                minlength: 5
                maxlength: 22
              password:
                type: string
                minlength: 8
                maxlength: 256
            required:
              - username
              - password
      responses:
        202:
          description: Accepted; a success object.
          schema:
            type: object
            properties:
              success:
                type: boolean
              token:
                type: string
              user:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  username:
                    type: string
        400:
          description: Bad JSON input.
        401:
          description: No auth token / no user found in database with that name.
        403:
          description: JWT token and username from client don't match.
        404:
          description: Specified User not found.
        406:
          description: Not acceptable JSON body.
        500:
          description: Internal server error on back-end occured.
